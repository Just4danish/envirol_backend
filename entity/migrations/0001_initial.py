# Generated by Django 3.2.11 on 2023-01-24 08:50

import django.core.validators
from django.db import migrations, models
import entity.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('establishment_name', models.CharField(max_length=255)),
                ('trade_license_no', models.CharField(blank=True, max_length=100, null=True)),
                ('trade_license_name', models.CharField(blank=True, max_length=100, null=True)),
                ('env_sap_id', models.CharField(max_length=100, null=True)),
                ('image', models.ImageField(null=True, upload_to=entity.models.content_file_name)),
                ('foodwatch_id', models.IntegerField(blank=True, null=True)),
                ('foodwatch_business_id', models.IntegerField(blank=True, null=True)),
                ('job_card_no', models.CharField(max_length=100, null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('phone_no', models.CharField(blank=True, max_length=50, null=True)),
                ('office_email', models.EmailField(max_length=254, null=True)),
                ('entity_location', models.CharField(blank=True, max_length=255, null=True)),
                ('location_remark', models.CharField(blank=True, max_length=255, null=True)),
                ('po_box', models.CharField(blank=True, max_length=50, null=True)),
                ('seating_capacity', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('gps_coordinates', models.CharField(blank=True, max_length=100, null=True)),
                ('google_location', models.CharField(blank=True, max_length=100, null=True)),
                ('makhani_no', models.CharField(blank=True, max_length=100, null=True)),
                ('meals_per_day', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('random_key', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Disabled', 'Disabled'), ('Deleted', 'Deleted')], default='Active', max_length=10)),
                ('modification_pending', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EntityFixture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.DecimalField(decimal_places=2, max_digits=6)),
                ('remarks', models.CharField(max_length=255, null=True)),
                ('label', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Disabled', 'Disabled'), ('Deleted', 'Deleted')], default='Active', max_length=10)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EntityGreaseTrap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.DecimalField(decimal_places=2, max_digits=6)),
                ('remarks', models.CharField(max_length=255, null=True)),
                ('label', models.CharField(max_length=100)),
                ('grease_trap_label', models.CharField(max_length=100, unique=True)),
                ('cleaning_frequency', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('last_cleaning_date', models.DateField()),
                ('next_cleaning_date', models.DateField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Disabled', 'Disabled'), ('Deleted', 'Deleted')], default='Active', max_length=10)),
                ('cleaning_status', models.CharField(choices=[('Cleaned', 'Cleaned'), ('Due', 'Due'), ('Overdue', 'Overdue')], default='Cleaned', max_length=10)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EntityGTCC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_start', models.DateField(null=True)),
                ('contract_end', models.DateField(null=True)),
                ('reason_for_rejection', models.TextField(null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Approval Pending', 'Approval Pending'), ('Rejected', 'Rejected'), ('Expired', 'Expired')], default='Approval Pending', max_length=20)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EntityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_taken', models.CharField(choices=[('Active', 'Active'), ('Disabled', 'Disabled'), ('Deleted', 'Deleted')], max_length=10)),
                ('fields_and_values', models.JSONField()),
                ('remarks', models.CharField(max_length=1500, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grease_trap_count', models.PositiveIntegerField()),
                ('total_gallon_collected', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('foodwatch_srid', models.CharField(max_length=100, null=True)),
                ('collection_completion_time', models.DateTimeField(null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Initiated', 'Initiated'), ('Assigned', 'Assigned'), ('Processing', 'Processing'), ('Completed', 'Completed'), ('Dumped', 'Dumped'), ('Canceled', 'Canceled')], default='Initiated', max_length=20)),
                ('initiator', models.CharField(default='FGW', max_length=20)),
                ('qr_scan_location', models.CharField(max_length=500, null=True)),
                ('publish_location', models.CharField(max_length=500, null=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('grease_trap_condtion', models.CharField(choices=[('Perfect', 'Perfect'), ('Good', 'Good'), ('Old', 'Old'), ('Damaged', 'Damaged'), ('Unavailable', 'Unavailable'), ('Not set', 'Not set')], default='Not set', max_length=20)),
                ('waste_contents', models.CharField(choices=[('Light', 'Light'), ('Moderate', 'Moderate'), ('Heavy', 'Heavy'), ('Solid', 'Solid'), ('Not set', 'Not set')], default='Not set', max_length=20)),
                ('cover_condition', models.CharField(choices=[('Perfect', 'Perfect'), ('Good', 'Good'), ('Old', 'Old'), ('Damaged', 'Damaged'), ('Unavailable', 'Unavailable'), ('Not set', 'Not set')], default='Not set', max_length=20)),
                ('buffle_wall_condition', models.CharField(choices=[('Perfect', 'Perfect'), ('Good', 'Good'), ('Old', 'Old'), ('Damaged', 'Damaged'), ('Unavailable', 'Unavailable'), ('Not set', 'Not set')], default='Not set', max_length=20)),
                ('outlet_elbow_condition', models.CharField(choices=[('Perfect', 'Perfect'), ('Good', 'Good'), ('Old', 'Old'), ('Damaged', 'Damaged'), ('Unavailable', 'Unavailable'), ('Not set', 'Not set')], default='Not set', max_length=20)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('PartiallyCompleted', 'PartiallyCompleted'), ('Skipped', 'Skipped')], default='Pending', max_length=20)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestDetailImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='service_request')),
                ('image_type', models.CharField(choices=[('Before', 'Before'), ('After', 'After')], max_length=10)),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('log', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]
